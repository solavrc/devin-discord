---
description: 
globs: 
alwaysApply: true
---
AI Coding Agentが効率的かつ安全にタスクを遂行するための指針です。

ここに書かれていることは絶対的な規則ではなく、状況に応じて最適な判断を下し、自律的に行動することを期待します。
不明な点や判断に迷う場合は、ユーザーに確認してください。

# プロジェクトコンテキストとタスク管理のアプローチ

LLMは長期記憶を持たず、一度に扱える情報量（コンテキストウィンドウ）にも限りがあります。
これらの制約を補い、複数回のセッションや複数のAgent間でも効率的に作業を引き継ぎ、プロジェクトの文脈を維持するために、以下のファイルを用いてコンテキストとタスクを管理します。

**常にこれらのファイルを最新の状態に保ち、タスク遂行の際は必ず参照・更新してください。**

1.  ** [README.md](mdc:README.md)**, ** [.cursor/docs/](mdc:.cursor/docs) ディレクトリ**: プロジェクト全体の概要を記述します。
    *   目的、主要技術スタック、アーキテクチャ概要、セットアップ手順、主要なファイル構成などを記載します。
    *   人間とAIの両方がプロジェクトを理解するための出発点となります。
    *   タスクに着手する前に必ず内容を確認し、プロジェクトの全体像を把握してください。

2.  ** [.cursor/tasks](mdc:.cursor/tasks) ディレクトリ**: 現在進行中のタスク詳細、実装計画、完了状況などを管理するマークダウンファイルを格納します。
    *   各ファイルが**個別のチケットやタスク**のように機能し、特定の作業範囲に関する文脈とサブタスクを記録します。
    *   新しいタスクを開始する際や、中断したタスクを再開する際は、該当するタスクファイルをこのディレクトリから見つけて参照してください。
    *   大きなタスクは、実行可能なサブタスクに分解し、タスクファイル内のリストに追加してください。
    *   タスクを進める中で発生した変更は、対応するタスクファイルに追記・編集してください。
    *   サブタスクが完了したら、速やかにタスクファイル内のチェックリストを更新し、進捗状況を明確にしてください。

タスク遂行に必要な情報がこれらのファイルに不足している場合、判断に迷う場合、または複数の実装方針が考えられる場合は、
曖昧なまま進めずにユーザーに状況を説明し、選択肢を提示してください。

# 権限と制約

- 現在のワークスペース（プロジェクトルート）以下のファイルに対する読み取り、書き込み、作成、削除の権限を持ちます。
- タスク遂行に必要なコマンドの実行を許可します。特に、エラーからの復旧やテスト実行のための試行は積極的に行ってください。
  - 開発環境で利用可能なコマンド全てに加え、
  - `aws`(--profile default) コマンドが利用可能です。

# コード生成・編集

## AI Agent 向けの開発ガイドライン

このプロジェクトでは、開発の多くを AI Agent が担当することを想定しています。

*   **タスク管理:** 現在進行中のタスクは [.cursor/tasks/](mdc:.cursor/tasks) ディレクトリ内のマークダウンファイルで管理されています。作業を開始・再開する際は、必ず関連するタスクファイルを確認・更新してください。
*   **テスト駆動開発 (TDD):** コードの変更・追加を行う際は、まず Jest を用いてテストを作成し ([test/](mdc:test) ディレクトリ)、そのテストをパスするように実装を進めてください (`npm test` で実行)。
*   **シンプルさ:** コンテキストウィンドウの制約を考慮し、可能な限りシンプルで理解しやすいコードを心がけてください。
*   **インフラ定義:** インフラは AWS CDK (TypeScript) で定義されています。変更が必要な場合は CDK コードを編集し、`cdk deploy` で反映させてください。
*   **エラーハンドリング:** エラーが発生した場合は、エラーメッセージ、スタックトレース、関連するコードを分析し、具体的な原因と解決策を報告してください。CloudWatch Logs でログを確認できます。
*   **不明点:** 不明な点や判断に迷う場合は、曖昧なまま進めずにユーザーに状況を説明し、確認してください。

## **テスト戦略: ハイブリッドアプローチ**

単体テストの作成・維持が困難または不安定になりがちな外部システム連携部分と、安定したテストが可能な純粋なロジック部分を区別し、それぞれに適したテストアプローチを組み合わせる戦略です。これにより、テストの網羅性、信頼性、開発速度のバランスを取ることを目指します。

1.  **(A) 純粋ロジックの単体テスト:**
    *   **対象:** 外部システム（API、データベース、UIフレームワーク、ファイルシステムなど）や副作用（状態の変更、I/O操作など）に**直接依存しない、決定論的なロジック**。入力が決まれば出力が一意に決まる関数やモジュールが該当します。
    *   **アプローチ:**
        *   これらの純粋なロジックを特定し、可能であれば**独立した関数やモジュールとして切り出します**。
        *   切り出された純粋なロジックに対して、**安定した単体テストを作成し、維持します**。これにより、コアロジックの品質とリグレッション防止を確実にします。
        *   既存のテストスイートに不安定なテストが含まれる場合、このアプローチでカバーされない検証項目は、削除、コメントアウト、または後述の (B) のアプローチへの移行を検討します。

2.  **(B) 連携部分の統合テストまたは E2E (End-to-End) テスト:**
    *   **対象:** 外部システムとの**連携が関わる部分**。具体的には、APIクライアントの呼び出し、データベースへのアクセス、UIイベントのハンドリング、外部ライブラリの利用箇所などが該当します。これらの部分は、外部要因や状態変化により単体テストが不安定になりやすい傾向があります。
    *   **アプローチ:**
        *   これらの連携部分については、単体テストに固執せず、**統合テスト**（複数のモジュールやサービスを組み合わせてテスト）や **E2Eテスト**（システム全体を実際のユーザー操作に近い形でテスト）でカバーすることを主とします。
        *   テストダブル（モック、スタブなど）を効果的に活用し、外部システムの動作をシミュレートすることで、テストの安定性と実行速度を向上させることができます。
        *   自動化された E2E テストの構築・維持コストが高い場合は、**手動による確認**や、**AI Agent による探索的テスト/シナリオテスト**も有効な代替手段となり得ます。重要なのは、実際の連携フローが期待通りに動作することを確認することです。

このハイブリッドアプローチにより、テストが困難な部分に過剰なコストをかけることなく、重要なビジネスロジックの品質を単体テストで担保しつつ、システム全体の連携動作も適切なレベルで確認することを目指します。

## コーディングスタイル

- TypeScript: `ES6`以降の記法を用いてください。セミコロン`;`を用いないでください。

## 備考

このプロジェクトにおけるインフラ定義のベストプラクティスとして、別アプリケーションである [chappy/](mdc:chappy) ディレクトリを参照できます。
